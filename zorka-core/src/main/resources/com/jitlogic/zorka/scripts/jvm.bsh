/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

__jvm() {


  autoregister() {
      if (!zorka.isMbsRegistered("java")) {
          mbs = java.lang.management.ManagementFactory.getPlatformMBeanServer();
          zorka.registerMbs("java", mbs);
          zorka.logInfo("Registered platform mbean server as 'java'");
          pdesc = java.lang.management.ManagementFactory.getRuntimeMXBean().getName().split("@");
          _agent_attrs.put("local.pid", pdesc[0]);
          _agent_attrs.put("local.host", pdesc[1]);
      } else {
          zorka.logInfo("Platform mbean server already registered. Skipping.");
      }
  }


  autoregister_plugin() {
      process(rec) {
          autoregister();
          return rec;
      }
      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  memutil(name) {
    mem_used = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "Usage", "used");
    mem_max = zorka.jmx("java", "java.lang:name="+name+",type=MemoryPool", "PeakUsage", "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  heaputil(name) {
    mem_used = zorka.jmx("java", "java.lang:type=Memory",name, "used");
    mem_max = zorka.jmx("java", "java.lang:type=Memory",name, "max");
    if (mem_used == null || mem_max == null) return null;
    if (mem_used.equals(0L) || mem_max.equals(0L)) return 0.0;
    return 100.0 * mem_used.longValue() / mem_max.longValue();
  }

  fdutil() {
    fd_used = zorka.jmx("java", "java.lang:type=OperatingSystem", "OpenFileDescriptorCount");
    fd_max = zorka.jmx("java", "java.lang:type=OperatingSystem", "MaxFileDescriptorCount");
    if (fd_used == null || fd_max == null) return null;
    if (fd_used.equals(0L) || fd_max.equals(0L)) return 0.0;
    return 100.0 * fd_used.longValue() / fd_max.longValue();
  }

  if (zorka.boolCfg("jvm.hiccup", true)) {
    mbean = zorka.stringCfg("jvm.hiccup.mbean", "zorka:type=ZorkaStats,name=Hiccup");
    perfmon.cpuHiccup("java", mbean, "CPU", 10, 30000).start();
  } // hiccup = yes

  sun_http_client_pre() {
    process(rec) {
      conn = rec.get("THIS");
      props = conn.getRequestProperties();
      rec.put("HDR_OUT", props);
      if (_dtrace_enabled) {
        requests = util.getField(conn, "requests");
        uheaders = util.getField(conn, "userHeaders");
        for (e : rec.entrySet()) {
          if (tracer.CTX_HEADERS.contains(e.getKey()) || e.getKey().startsWith(tracer.DH_UBER_CTX)) {
            requests.add(e.getKey(), e.getValue());
            uheaders.add(e.getKey(), e.getValue());
          }
        }
      }
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  _trace_enabled = zorka.boolCfg("tracer");
  if (_trace_enabled) zorka.require("tracer.bsh");

  if (zorka.boolCfg("jvm.httpclient.trace", false)) {
    spy.add(spy.instrument("SUN_HTTP_CLIENT_CONNECT")
      .onEnter(spy.fetchArg("THIS", 0),
        _trace_enabled ? spy.subchain(
          tracer.begin("http"),
          tracer.formatAttrs(_agent_attrs)
        ): null,
        _dtrace_enabled ? tracer.dtraceOutput(0, tracer.DFK_CLIENT) : null,
        sun_http_client_pre(),
        tracer.procAttr(tracer.PA_MAP_OF_LISTS_1, "http.header.out.", "HDR_OUT"))
      .onReturn(spy.fetchRetVal("STATUS"))
      .onError(tracer.markError())
      .onSubmit(
        tracer.formatAttr("http.url", "${THIS.URL}"),
        tracer.formatAttr("http.path", "${THIS.URL.path}"),
        tracer.formatAttr("http.status_code", "${STATUS}"),
        tracer.formatAttr("http.method", "${THIS.requestMethod}"))
      .include(spy.byMethod(0, "sun.net.www.protocol.http.HttpURLConnection", "plainConnect0", null)));

    // TODO input headers cannot be fetched from connect()/plainConnect0() as it forces client to fetch results
    //      before sending POST data;
  }

  __thread() {

    zorka.logInfo("Enabling thread monitoring.");

    dumper = null;

    if (zorka.boolCfg("jvm.thread.dumper", false)) {

      zorka.logInfo("Enabling thread contention dumper.");

      trapper = zorka.rollingFileTrapper("threads", "INFO",
        zorka.stringCfg("jvm.thread.dumper.log.path", util.path("${zorka.log.dir}", "thread-dumps.log")),
        zorka.intCfg("jvm.thread.dumper.log.num", 4),
        zorka.kiloCfg("jvm.thread.dumper.log.size", 4*1024*1024),
        false);

      dumper = perfmon.threadDumper(trapper,
          zorka.intCfg("jvm.thread.dumper.thr.max", 4),
          zorka.intCfg("jvm.thread.dumper.thread.cpu.min", 30),
          zorka.intCfg("jvm.thread.dumper.total.cpu.min", 100),
          zorka.intCfg("jvm.thread.dumper.stack.depth", 8));

      _dumper_interval = zorka.longCfg("jvm.thread.dumper.interval", 60000);
      zorka.schedule(dumper, _dumper_interval, _dumper_interval);
    }

    monitor = perfmon.threadMonitor();
    _monitor_interval = zorka.longCfg("jvm.thread.monitor.interval", 10000);
    zorka.schedule(monitor, _monitor_interval, _monitor_interval);

    return this;
  }

  thread = zorka.boolCfg("jvm.thread.monitor", false) ? __thread() : null;

  if (zorka.boolCfg("zorka.mbs.autoregister", false)) {
    autoregister();
  }

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("JVM");
  }

  return this;
}

// Will be used in all tracing configurations
_agent_attrs = zorka.mapCfg("agent.attrs");

jvm = __jvm();
