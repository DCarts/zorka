/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */


zorka.require(
  "tracer.bsh"
);

__ldap() {

    // Default values for LDAP tracer options
    zorka.defCfg("ldap.trace", zorka.stringCfg("tracer", "no"));
    zorka.defCfg("ldap.trace.time", zorka.longCfg("tracer.min.trace.time"));

    _mbean = "zorka:type=ZorkaStats,name=Ldap";
    _trace = zorka.boolCfg("ldap.trace");
    _traceTime = zorka.longCfg("ldap.trace.time");

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("LDAP");
  }

    spy.add(spy.instrument("LDAP_SEARCH")
       .onEnter(spy.fetchArg("NAME", 1), spy.fetchArg("FILTER", 2),
           _trace ? spy.subchain(
               tracer.begin("db", _traceTime),
               tracer.formatAttrs(_trace_attrs, "db.type", "ldap",
                 "span.kind", "CLIENT", "db.instance", "${NAME}",
                 "db.statement", "${FILTER}")
           ) : null)
       .onError(_trace ? tracer.flags(tracer.SUBMIT_TRACE) : null)
       .onSubmit(spy.zorkaStats("java", _mbean, "stats", "ALL"))
       .include(
           spy.byMethod(0, "javax.naming.directory.InitialDirContext", "search", null, "javax.naming.Name"),
           spy.byMethod(0, "javax.naming.directory.InitialDirContext", "search", null, "String", "javax.naming.directory.Attributes"),
           spy.byMethod(0, "javax.naming.directory.InitialDirContext", "search", null, "String", "String", "javax.naming.directory.SearchControls")
        ));


    args_formatter() {
        process(rec) {
            try {
                tracer.newAttr("FILTER", java.text.MessageFormat.format(rec.get("FILTER"), rec.get("ARGS")));
            } catch (Exception e) {
                StringBuilder sb = new StringBuilder();
                sb.append("<err> '" + rec.get("FILTER") + "' [");
                if (rec.get("ARGS") != null) {
                    for (arg : rec.get("ARGS")) {
                        sb.append(arg); sb.append(", ");
                    }
                }
                sb.append("]");
                tracer.newAttr("db.statement", sb.toString());
            }
            return rec;
        }
        return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
    }

    spy.add(spy.instrument("LDAP_SEARCH_ATTRS")
       .onEnter(spy.fetchArg("NAME", 1), spy.fetchArg("FILTER", 2), spy.fetchArg("ARGS", 3),
           _trace ? spy.subchain(
               tracer.begin("db", _traceTime),
               tracer.formatAttrs(_trace_attrs, "db.type", "ldap", "span.kind", "CLIENT", "db.instance", "${NAME}"),
               args_formatter()
           ) : null)
       .onSubmit(spy.zorkaStats("java", _mbean, "stats", "ALL"))
       .include(
           spy.byMethod(0, "javax.naming.directory.InitialDirContext", "search", null, "String", "String", "Object[]", "javax.naming.directory.SearchControls")
        ));

  return this;

}

ldap = __ldap();

