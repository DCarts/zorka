/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh"
);

__quartz() {

  zorka.defCfg("quartz.trace", zorka.boolCfg("tracer"));
  zorka.defCfg("quartz.trace.time", zorka.longCfg("tracer.min.trace.time"));

  zorka.defCfg("quartz.stats", "yes");
  zorka.defCfg("quartz.stats.mbean", "zorka:type=ZorkaStats,name=Quartz");

  _trace = zorka.boolCfg("quartz.trace");
  _stats = zorka.boolCfg("quartz.stats");
  _mbean = zorka.stringCfg("quartz.stats.mbean");

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("QUARTZ");
  }

  spy.add(
    spy.instrument("QUARTZ_JOB_EXECUTE")
    .onEnter(spy.fetchArg("CTX", 1),
      spy.get("DETAIL", "CTX", "jobDetail"),
      spy.get("KEY", "DETAIL", "key"),
      _trace ? spy.subchain(
        tracer.begin("job", zorka.longCfg("quartz.trace.time")),
        tracer.formatAttrs(_trace_attrs, "job.name", "${KEY.name|DETAIL.name}", "span.kind", "JOB",
          "job.group", "${KEY.group|DETAIL.group}", "job.refire.count", "${CTX.refireCount}",
          "job.fire.time", "${CTX.fireTime}", "job.scheduled.time", "${CTX.scheduledFireTime}",
          "job.next.time", "${CTX.nextFireTime}", "job.description", "${DETAIL.description}",
          "job.instance.id", "${CTX.fireInstanceId}", "job.durable", "${DETAIL.durable}",
          "job.persist", "${DETAIL.persistJobDataAfterExecution}", "job.volatile", "${DETAIL.volatile}",
          "job.synchronized", "${DETAIL.concurrentExecutionDisabled}", "job.stateful", "${DETAIL.stateful}",
          "job.recovering", "${CTX.recovering}", "job.type", "quartz"),
        _dtrace_enabled ? tracer.dtraceInput(_dtrace_input_flags,tracer.DFK_CONSUMER) : null
      ) : null)
    .onError(tracer.markError())
    .onSubmit(
      _stats ? spy.zorkaStats("java", _mbean, "stats", "ALL") : null,
      _stats ? spy.zorkaStats("java", _mbean, "jobs", "${KEY.name|DETAIL.name}") : null)
    .include(spy.byInterfaceAndMethod(0, "org.quartz.Job", "execute", "void", "org.quartz.JobExecutionContext")));


  discovery() {
    return zabbix.discovery(zorka.query("java", _mbean, "name", "type").get("jobs").listAs("**", "JOB"));
  }


  return this;
}

quartz = __quartz();

