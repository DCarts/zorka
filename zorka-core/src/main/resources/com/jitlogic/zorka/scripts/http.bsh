/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require("tracer.bsh");

__http() {

  // Default values for HTTP stats
  zorka.defCfg("http.stats", "yes");
  zorka.defCfg("http.stats.congestion", "yes");
  zorka.defCfg("http.stats.mbean", "zorka:type=ZorkaStats,name=HttpStats");

  // Default values for HTTP tracer options
  zorka.defCfg("http.trace", zorka.stringCfg("tracer", "no"));
  zorka.defCfg("http.trace.time", zorka.longCfg("tracer.min.trace.time"));
  zorka.defCfg("http.trace.include", "");
  zorka.defCfg("http.trace.exclude", "/favicon.ico");

  // Default values for HTTP parameter processing
  zorka.defCfg("http.params", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.params.exclude", "");
  zorka.defCfg("http.params.include", "");
  zorka.defCfg("http.params.prefix", "http.param.");
  zorka.defCfg("http.param.maxlen", 256);

  // Default values for HTTP cookie processing
  zorka.defCfg("http.cookies", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.cookies.exclude", "");
  zorka.defCfg("http.cookies.include", "");
  zorka.defCfg("http.cookies.iprefix", "http.cookie.in.");
  zorka.defCfg("http.cookies.oprefix", "http.cookie.out.");
  zorka.defCfg("http.cookies.maxlen", "256");

  // Default values for HTTP headers processing
  zorka.defCfg("http.headers", zorka.stringCfg("http.trace"));
  zorka.defCfg("http.headers.exclude", "");
  zorka.defCfg("http.headers.include", "");
  zorka.defCfg("http.headers.iprefix", "http.header.in.");
  zorka.defCfg("http.headers.oprefix", "http.header.out.");
  zorka.defCfg("http.headers.maxlen", "256");

  _trace = zorka.boolCfg("http.trace");
  _stats = zorka.boolCfg("http.stats");
  _congestion = zorka.boolCfg("http.stats.congestion");
  _mbean = zorka.stringCfg("http.stats.mbean");
  _action = _congestion ? spy.ACTION_EXIT|spy.ACTION_STATS : spy.ACTION_STATS;
  _params = zorka.boolCfg("http.params");
  _paramLen = zorka.intCfg("http.param.maxlen", 128);
  _cookies = zorka.boolCfg("http.cookies");
  _headers = zorka.boolCfg("http.headers");

  _uriQualifier = spy.stringMatcher("URI", zorka.listCfg("http.trace.include"), zorka.listCfg("http.trace.exclude"));

  _errors = zorka.setCfg("http.error.codes");

  _redirQualifier = zorka.hasCfg("http.redir.errors") ?
    spy.subchain(
      spy.stringMatcher("REDIRECT", zorka.listCfg("http.redir.errors"), zorka.listCfg("")),
      tracer.traceFlags("HTTP", tracer.SUBMIT_TRACE|tracer.ERROR_MARK)
    ) : null;

  if (zorka.boolCfg("zabbix.active")) {
    zorka.require("zabbix.bsh");
    zabbix.tagMetadata("HTTP");
  }

  param_processor() {

      _pprefix = zorka.stringCfg("http.params.prefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.params.include"), zorka.listCfg("http.params.exclude"));

      process(rec) {
          sb = new StringBuilder();
          pmap = rec.get("REQ").getParameterMap();
          if (pmap != null) {
              for (e : pmap.entrySet()) {
                  String k = e.getKey();
                  if (_matcher.matches(k)) {
                      String v = e.getValue().length > 0 ? e.getValue()[0] : "";
                      if (v.length() > _paramLen) {
                          v = v.substring(0, _paramLen);
                      }
                      if (_trace) {
                          tracer.newAttr(_pprefix+k, v);
                      }
                      c = sb.length() > 0 ? "&" : "?";
                      sb.append(c + k + "=" + v);
                  }
              }
          }
          rec.put("PARAMS", sb.toString());
          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  cookies_processor(cIn, cOut) {

      _cookieLen = zorka.intCfg("http.cookie.maxlen", 128);
      _iprefix = zorka.stringCfg("http.cookies.iprefix");
      _oprefix = zorka.stringCfg("http.cookies.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.cookies.include"), zorka.listCfg("http.cookies.exclude"));

      process(rec) {
          if (cIn) {
              icookies = util.get(rec.get("REQ"), "cookies");
              if (icookies != null) {
                  for (c : icookies) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (_trace) {
                              tracer.newAttr(_iprefix + name, val);
                          }
                      }
                  }
              }
          }

          if (cOut) {
              ocookies = util.get(rec.get("RESP"), "cookies");
              if (ocookies != null) {
                  for (c : ocookies) {
                      name = c.getName();
                      if (_matcher.matches(name)) {
                          val = c.getValue();
                          if (val != null && val.length() > _cookieLen) {
                              val = val.substring(0, _cookieLen);
                          }
                          if (_trace) {
                              tracer.newAttr(_oprefix + name, val);
                          }
                      }
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  headers_processor(hdrIn, hdrOut) {

      _iprefix = zorka.stringCfg("http.headers.iprefix");
      _oprefix = zorka.stringCfg("http.headers.oprefix");
      _matcher = util.stringMatcher(zorka.listCfg("http.headers.include"), zorka.listCfg("http.headers.exclude"));
      _maxlen = zorka.intCfg("http.headers.maxlen");

      process(rec) {

          req = rec.get("REQ");
          if (hdrIn && req != null && req.getHeaderNames() != null) {
              for (name : req.getHeaderNames()) {
                  hdrs = req.getHeaders(name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          tracer.procHeader(rec, name, i, hdr, _iprefix);
                          i++;
                      }
                  }
              }
          }

          resp = rec.get("RESP");
          if (hdrOut && resp != null && util.get(resp, "headerNames") != null) {
              for (name : resp.getHeaderNames()) {
                  hdrs = resp.getHeaders(name);
                  if (hdrs != null) {
                      i = 0;
                      for (hdr : hdrs) {
                          tracer.procHeader(null, name, i, hdr, _oprefix);
                          i++;
                      }
                  }
                  if ("Location".equals(name) && hdrs.length > 0) {
                    tracer.newAttr("REDIRECT", hdrs[0]);
                    rec.put("REDIRECT", hdrs[0]);
                  }
              }
          }

          return rec;
      }

      return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }


  error_marker() {
    process(rec) {
      rec.put(".STAGES", (rec.get(".STAGES")|(1<<spy.ON_ERROR))&(~(1<<spy.ON_RETURN)));
      return rec;
    }
    return (com.jitlogic.zorka.core.spy.SpyProcessor)this;
  }

  _tags_chain = null;

  if (_stats && zorka.boolCfg("http.tags", false)) {
      zorka.logInfo("Enabling HTTP tagging ...");
      stats = zorka.registerZorkaStats("java", _mbean, "byTag", "HTTP stats by tag classifiers");
      _tags_chain = spy.subchain(
        spy.put("TAG", zorka.stringCfg("http.tags.0", "OTHER")),
        spy.put("TAG_DESC", zorka.stringCfg("http.tags.0.desc", "Other pages")));
      for (i = 1; ; i++) {
          if (zorka.hasCfg("http.tags."+i+".uri")) {
              zorka.logInfo("HTTP_TAG: " + zorka.stringCfg("http.tags."+i+".uri")
                  + " -> " + zorka.stringCfg("http.tags."+i));
              stats.getMethodCallStatistic(zorka.stringCfg("http.tags."+i))
                .setDescription(zorka.stringCfg("http.tags."+i+".desc", "${TAG}"));
              _tags_chain = _tags_chain.with(
                  spy.transform("TAG", "URI",
                    zorka.stringCfg("http.tags."+i+".uri"),
                    zorka.stringCfg("http.tags."+i)));
          } else {
              break;
          }
      }
      _tags_chain = _tags_chain.with(spy.zorkaStats("java", _mbean, "byTag", "${TAG}"));
      if (zorka.boolCfg("zabbix.active")) {
          zabbix.tagMetadata("HTTP:TAGS");
      }
  }

  if (zorka.boolCfg("http.instrument.servlet", false)) {
    zorka.logInfo("Instrumenting generic HTTP servlets enabled.");
    spy.add(
      spy.instrument("SERVLET_HTTP")
        .onEnter(
          spy.fetchArg("THIS", 0), spy.fetchArg("REQ", 1), spy.fetchArg("RESP", 2),
          spy.format("URI", "${REQ.requestURI}"),
          _trace ? spy.subchain(
            _uriQualifier,
            tracer.begin("http", zorka.longCfg("http.trace.time")),
            tracer.attr("http.url", "URI"),
            tracer.formatAttrs(_trace_attrs, "http.servlet.info", "${THIS.servletInfo}"),
            _headers ? headers_processor(true, false) : null,
            (_dtrace_enabled && _headers) ? tracer.dtraceInput(_dtrace_input_flags, tracer.DFK_SERVER) : null
          ) : null,
        _congestion ? spy.zorkaStats("java", _mbean, "stats", "ALL", "T", null, spy.ACTION_ENTER) : null)
        .onReturn(spy.put("ERR", ""))
        .onError(spy.fetchError("EX"), spy.format("ERR", "${EX}"),
          _trace ? spy.subchain(
            _uriQualifier,
            tracer.flags(tracer.SUBMIT_TRACE),
            tracer.attr("ERR", "ERR")
            ) : null)
        .onSubmit(
          spy.strTime("TIME"),
          spy.format("STATUS", "${RESP.status}"),
          spy.get("USER", "REQ", "remoteUser"),
          _trace ? spy.subchain(
            _uriQualifier,
            tracer.attr("http.status_code", "STATUS"),
            tracer.formatAttr("http.method", "${REQ.method}"),
            tracer.filterBy("STATUS", null, _errors, null, null),
            tracer.attr("http.user", "USER"),
            _cookies ? cookies_processor(true, true) : spy.put("COOKIES", ""),
            _headers ? headers_processor(false, true) : null,
            _params ? param_processor() : spy.put("PARAMS", "")
          ) : null,
          spy.subchain(
            spy.valSetFilter("STATUS", _errors),
            spy.markError(), tracer.markError()),
          _redirQualifier,
          _stats ? spy.zorkaStats("java", _mbean, "stats", "ALL", "T", null, _action) : null,
          _tags_chain)
          .include(
            spy.byInterfaceAndMethod(0, "javax.servlet.Servlet", "service", "void",
              "javax.servlet.ServletRequest", "javax.servlet.ServletResponse")));
  } // http.instrument.servlet

  discovery(attr, tag) {
    return zabbix.discovery(
      zorka.query("java", _mbean, "name", "type")
        .get(attr)
        .listAs("**", tag)
        .getValueAs("description", "DESC"));
  }

  calls(attr, tag) {
    calls = zorka.jmx("java", _mbean, attr, tag, "calls");
    return calls != null ? calls : 0;
  }

  errors(attr, tag) {
    errors = zorka.jmx("java", _mbean, attr, tag, "errors");
    return errors != null ? errors : 0;
  }

  peak(attr, tag) {
    peak = zorka.jmx("java",  _mbean, attr, tag, "maxTimeCLR");
    return peak != null ? peak : 0;
  }

  threads(attr, tag) {
    threads = zorka.jmx("java",  _mbean, attr, tag, "maxThreadsCLR");
  }

  avg1(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG1");
  }

  avg5(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG5");
  }

  avg15(attr, tag) {
    return zorka.rate("java", _mbean, attr, tag, "time", "calls", "AVG15");
  }

  sla(attr, tag, t, d) {
    sla = zorka.jmx("java", _mbean, attr, tag, "sla", t, "slaCLR");
    return sla != null ? sla : d;
  }

  return this;
}

http = __http();

