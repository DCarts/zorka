/**
 * Copyright 2012-2019 Rafal Lewczuk <rafal.lewczuk@jitlogic.com>
 *
 * ZORKA is free software. You can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * ZORKA is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ZORKA. If not, see <http://www.gnu.org/licenses/>.
 */

zorka.require(
  "tracer.bsh"
);

__hystrix() {

  spy.add(spy.instrument("HYSTRIX_COMMAND_OUT")
    .onEnter(
      spy.fetchArg("THIS", 0),
      _trace_enabled ? tracer.begin("breaker") : null,
      _dtrace_enabled ? tracer.dtraceOutput(0, tracer.DFK_CLIENT) : null,
      _dtrace_enabled ? spy.shelve("HYSTRIX", 120000, true, "THIS", "DTRACE") : null)
    .onError(tracer.markError())
    .onSubmit(
      _trace_enabled ? tracer.formatAttrs(_trace_attrs, "breaker.type", "hystrix", "span.kind", "CLIENT",
          "breaker.group", "${THIS.commandGroup}", "breaker.key", "${THIS.commandKey}") : null)
    .include(spy.byMethod("com.netflix.hystrix.HystrixCommand", "execute")));

  spy.add(spy.instrument("HYSTRIX_COMMAND_IN")
    .onEnter(
      spy.fetchArg("THIS", 0),
      _trace_enabled ? tracer.begin("breaker") : null,
      _dtrace_enabled ? spy.unshelve("HYSTRIX", true, "THIS", "DTRACE") : null,
      _dtrace_enabled ? tracer.dtraceInput(_dtrace_input_flags,tracer.DFK_CONSUMER) : null)
    .onError(tracer.markError())
    .onSubmit(
      _trace_enabled ? tracer.formatAttrs(_trace_attrs, "breaker.type", "hystrix", "span.kind", "SERVER",
          "breaker.group", "${THIS.commandGroup}", "breaker.key", "${THIS.commandKey}") : null)
    .include(
      spy.byMethod(0, zorka.stringCfg("hystrix.command.class", "com.netflix.hystrix.contrib.javanica.command.GenericCommand"), "run", null),
      spy.byMethod(0, "org.springframework.cloud.openfeign.support.FallbackCommand", "run", null),
      spy.byMethod(0, "com.netflix.hystrix.contrib.javanica.command.BatchHystrixCommand", "run", null)));

  return this;

}

hystrix = __hystrix();

