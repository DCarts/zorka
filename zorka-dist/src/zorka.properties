# Zorka configuration properties file.
# All configuration settings used by agent itself
# and agent extension scripts can be stored here.

# Basic configuration (plain JVM + zabbix) is loaded from init.bsh. There is no need to manually
# include
# Agent automatically detects applications / frameworks and loads appropriate scripts.

# Example: override
# scripts.auto = no
# scripts = apache/tomcat.bsh

# Example: Websphere 8.x (was.user and was.pass are required for PMI)
# was.user = zorka
# was.pass = z0RkA_c0nF1d3nt14l

# Zabbix agent is enabled by default. Uncomment this to disable zabbix integration.
# zabbix = no

# Zabbix Active Agent is enabled by default. Uncomment this to disable active agent for zabbix.
# zabbix.active = no

# Zabbix Host Metadata - useful in conjunction with (properly configured) zabbix actions - see documentation.
#zabbix.active.host.metadata = ZORKA 940590418900848a022fe395f2fc7a61 HTTP LDAP SQL

# Zabbix Server's Address (IP:Port) 
# zabbix.active.server.addr = 192.168.56.10:10051

# Add IP addresses of your zabbix servers here.
# Only servers from this list will be allowed to access agent using zabbix protocol.
#zabbix.server.addr = 127.0.0.1,192.168.1.1

# Default port Zabbix protocol will listen on.
#zabbix.listen.port = ${$ZORKA_ZBX_LISTEN_PORT:10055}

# Enter name of your application and host here.
# Should be unique for every monitored application.
#zorka.hostname = ${$USER}.${$HOSTNAME}

# Switch this to setting to enable tracer and uncomment tracer.net or tracer.file to direct tracer data somewhere.
# tracer = yes

# Uncomment this and set proper IP address to send data to ZICO collector
# tracer.net = yes
# tracer.net.addr = 1.2.3.4
# tracer.net.port = 8640

# Uncomment this to save tracer data in local file. Deprecated.
# tracer.file = yes

# Uncomment this and set proper address to send data to Zabbix
# tracer.zabbix = yes
# tracer.zabbix.addr = 192.168.56.1
# tracer.zabbix.port = 8000

# Tuning tracer-zabbix integration
# tracer.zabbix.send.interval = 15
# tracer.zabbix.batch.size = 100

# Interesting tracer tunables

# Minimum execution time for trace to be sent to collector (in milliseconds)
# Not that this is global setting that can be overridden for particular subsystems (eg. HTTP)
# tracer.min.trace.time = 0

# Minimum time traced method has to execute in order to be recorded by tracer in nanoseconds (0.25ms in this example)
# tracer.min.method.time = 250000

# Maximum number of methods recorded per trace; this limit prevents agent
# from overruning host JVM memory when collecting huge trace;
# tracer.max.trace.records = 4096

# Interesting settings for HTTP monitoring

# Disables HTTP tracing (leaving other traced activities enabled)
# There is no reason to use this in most cases, at least unless it causes problems;
# http.trace = no

# This setting will override tracer.min.trace.time for HTTP requests
# http.trace.time = 5000

# URLs that should be excluded (by full URI or by regex)
# This is useful when
http.trace.exclude = ~.*.png, ~.*.gif, ~.*.js, ~.*.css, ~.*.jpg, ~.*.jpeg, ~.*favicon.ico

# Disables HTTP parameters collection by tracer
# http.params = no

# HTTP parameters that should be excluded by tracer
# This might be important for security reasons, (eg. password fields are good candidates for exclusion)
# http.params.exclude = j_password, password, newPassword, newPasswordRepeat

# Disables HTTP cookies collection by tracer
# http.cookies = no

# Cookies that should be excluded by tracer
# This might be important for security reasons (eg. session cookies are good candidates)
# http.cookies.exclude = JSESSIONID, jsessionid

# Disables HTTP headers collection by tracer
# http.headers = no

# This will cause only selected parameters to be collected. Everything else will be dropped.
# All three components (headers, cookies, parameters) have both .include and .exclude settings.
# The latter one is useful when only a handful things have to be dropped, the former one -
# when strict control over collected parameters is needed (eg. due to huge number of recorded data)
# http.headers.include = cache-control, connection, user-agent

# Enables slow HTTP request log (can be useful if we don't want to enable tracer but still want to see slow HTTP requests)
# http.slow = yes
# http.slow.time = 10000

# Enable HTTP error log (logs HTTP errors)
# http.error = yes



# Interesting EJB settings

# Disables EJB tracing
# ejb.trace = no

# Overrides EJB tracer.min.trace.time for EJB calls. Note that if EJB calls happen inside another trace
# (eg. HTTP), their data (arguments, class, method etc.) will be visible in parent trace. In such cases
# EJB traces can be 'promoted' to top level if their execution time exceeds defined threshold or if error occurs.
# ejb.trace.time = 5000

# Disables EJB argument processing. EJB arguments are recorded as attributes named ARG0, ARG1, ...
# ejb.params = no

# EJB inclusions and exclusions are done by data type. It is useful beacuse sometimes calling toString()
# methods of certain application classes might cause troubles due to poor implementation.
# ejb.params.exclude = some.problematic.Clazz, some.other.problematic.Clazz

# Slow EJB calls and error EJB call logs are configured the same way as their HTTP counterparts.
# ejb.slow = yes
# ejb.slow.time = 10000
# ejb.error = yes


# Interesting SQL settings

# Disables SQL tracing (not wise if overall tracer is enabled)
# sql.trace = no

# Minimum execution time for SQL trace to be "promoted" as top level trace.
# sql.trace.time = 1000

# Slow SQL queries or SQL errors are configured in the same way as tiehr HTTP counterparts.
# sql.slow = yes
# sql.slow.time = 10000
# sql.error = yes


# Interesting JMS settings

# Disables JMS tracing (not wise if overall tracer is enabled)
# jms.trace = no

# Minimum execution time for JMS trace to be "promoted" as top level trace.
# jms.trace.time = 1000

# Slow JMS handling or JMS handling errors are configured in the same way as their HTTP counterparts.
# jms.slow = yes
# jms.slow.time = 10000
# jms.error = yes


# Interesting SOAP settings

# Disables SOAP tracing (not wise if overall tracer is enabled)
# soap.trace = no

# Minimum execution time for SOAP trace to be "promoted" as top level trace.
# soap.trace.time = 1000

# Slow SOAP handling or SOAP handling errors are configured in the same way as their HTTP counterparts.
# soap.slow = yes
# soap.slow.time = 10000
# soap.error = yes

